{"version":3,"sources":["components/CardListComponent/CardListComponent.jsx","components/CartList/CartList.jsx","components/SearchBar/SearchBar.jsx","App.js","serviceWorker.js","index.js"],"names":["CardListComponent","props","className","src","locations","id","alt","name","email","CartList","map","key","SearchBar","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","Response","json","users","this","filterLocations","filter","location","toLowerCase","includes","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yTAGaA,G,MAAoB,SAAAC,GAAK,OAClC,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,UAAUC,GAA1C,2BAAuEC,IAAKL,EAAMG,UAAUG,OACpG,4BAAKN,EAAMG,UAAUG,MACrB,2BAAIN,EAAMG,UAAUI,UCHfC,G,MAAU,SAAAR,GACnB,OAAQ,yBAAKC,UAAU,cACVD,EAAMG,UAAUM,KAAK,SAAAN,GAAS,OAC3B,kBAAC,EAAD,CAAmBO,IAAKP,EAAUC,GAAID,UAAWA,UCJxDQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACrB,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,EAAcZ,UAAU,aCkCtEe,G,wDAhCb,aAAc,IAAD,8BACX,gBAWFH,aAAe,SAAAI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAXpC,EAAKC,MAAQ,CACXnB,UAAW,GACXgB,YAAY,IAJH,E,gEAOO,IAAD,OACjBI,MAAM,6CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACf,UAAWwB,S,+BAKnC,IAAD,EAC6BC,KAAKN,MAAhCnB,EADF,EACEA,UAAYgB,EADd,EACcA,YACdU,EAAkB1B,EAAU2B,QAAO,SAAAC,GAAQ,OAC7CA,EAASzB,KAAK0B,cAAcC,SAASd,EAAYa,kBAErD,OACE,yBAAK/B,UAAU,OACb,yCACA,kBAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eACnB,kBAAC,EAAD,CAAUV,UAAW0B,S,GA3BXK,cCOEC,QACW,cAA7BC,OAAOL,SAASM,UAEe,UAA7BD,OAAOL,SAASM,UAEhBD,OAAOL,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c1c591d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CardListComponent-style.css';\r\n\r\nexport const CardListComponent = props => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.locations.id}??set=set2&size=180x180`} alt={props.locations.name} />\r\n        <h1>{props.locations.name}</h1>\r\n        <p>{props.locations.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport { CardListComponent } from '../CardListComponent/CardListComponent';\r\nimport './CartList-style.css';\r\n\r\nexport const CartList= props =>{\r\n    return (<div className=\"root-class\">\r\n                {props.locations.map( locations => \r\n                    <CardListComponent key={locations.id} locations={locations} />)}\r\n            </div>);\r\n};","import React from 'react';\r\nimport './SearchBar-style.css';\r\n\r\nexport const SearchBar = ( {placeholder , handleChange} ) => (\r\n    <input type=\"search\" placeholder={placeholder} onChange={handleChange} className=\"search\" />      \r\n);","import React, { Component } from 'react';\nimport { CartList }  from './components/CartList/CartList';\nimport  { SearchBar } from './components/SearchBar/SearchBar';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      locations: [],\n      searchField:''\n    }\n  }\n  componentDidMount(){\n    fetch('http://jsonplaceholder.typicode.com/users')\n      .then(Response => Response.json())\n      .then(users=> this.setState({locations: users}));\n  }\n  handleChange = e => {\n   this.setState({searchField: e.target.value})\n  }\n  render(){\n    const { locations , searchField }= this.state;\n    const filterLocations = locations.filter(location =>\n        location.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <h2>Locations</h2>\n        <SearchBar \n        placeholder=\"Search Location\" \n        handleChange={this.handleChange} />\n        <CartList locations={filterLocations} />\n      </div>\n    )\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}